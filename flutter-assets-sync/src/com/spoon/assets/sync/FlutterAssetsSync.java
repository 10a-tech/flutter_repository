package com.spoon.assets.sync;

import com.intellij.openapi.actionSystem.AnAction;
import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.project.Project;

import java.io.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Objects;
import java.util.regex.Matcher;

import static com.spoon.assets.sync.Constants.*;

public class FlutterAssetsSync extends AnAction {


    private SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");

    private Helper helper = null;


    @Override
    public void actionPerformed(AnActionEvent e) {
        helper = new Helper();
        //获取当前项目
        Project project = e.getProject();
        //当前项目不为空获取BasePath
        String path = Objects.requireNonNull(project).getBasePath();
        //检查目录结构
        if (!helper.checkFlutterProj(path)) {
            helper.showErrMsg(Constants.NOT_FLUTTER);
            return;
        }
        if (!helper.checkAssets(path)) {
            helper.showErrMsg("No asset directory named asset, assets or images was found.");
            return;
        }
        //生成开始
        genAssetRef(path);
    }

    private void genAssetRef(String path) {
        List<String> assets = helper.getAssets(path);
        if (assets.isEmpty()) {
            return;
        }
        //更新pubspec.yaml
        updatePubspec(path, assets);
        //生成r.dart
        generatedRDart(path, assets);
    }

    /**
     * 更新pubspec.yaml文件中的资源声明
     *
     * @param path   项目路径
     * @param assets 扫描生成的资源声明
     */
    private void updatePubspec(String path, List<String> assets) {
        System.out.println("Updating pubspec.yaml...");
        File pubspec = new File(path, PUBSPEC);
        if (!pubspec.exists()) {
            return;
        }
        //保留恢复的内容行
        List<String> keepLines = new ArrayList<>();
        BufferedReader reader = null;
        BufferedWriter writer = null;
        try {
            reader = new BufferedReader(new FileReader(pubspec));
            String line = reader.readLine();
            int wheel = 0;
            int jumpIndex = 0;
            while (line != null) {
                //非assets和- assets的内容保留
                if (!line.matches("^ {2}assets:") && !line.contains("- assets/")) {
                    keepLines.add(line);
                } else {
                    //记录assets出现的位置
                    if (jumpIndex == 0) {
                        jumpIndex = wheel;
                    }
                }
                wheel++;
                line = reader.readLine();
            }
            writer = new BufferedWriter(new FileWriter(pubspec));
            // 将统计到的资源插入到jumpIndex的位置
            if (jumpIndex != 0) {
                keepLines.add(jumpIndex, "  assets:");
                keepLines.addAll(jumpIndex + 1, assets);
            }
            for (String out : keepLines) {
                //恢复文件内容
                writer.write(out);
                writer.newLine();
            }
            writer.flush();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (writer != null) {
                try {
                    writer.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * 生成R.dart文件
     *
     * @param path
     * @param assets
     */
    private void generatedRDart(String path, List<String> assets) {
        System.out.println("start generate res.dart...");
        //Res.dart生成目录
        File resFile = new File(path + "/lib/generated", R_FILE);
        if (!resFile.exists()) {
            try {
                resFile.createNewFile();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        BufferedWriter writer = null;
        try {
            writer = new BufferedWriter(new FileWriter(resFile));
            writer.write("/// Generated by Flutter-Asstes-Sync on " + sdf.format(Calendar.getInstance().getTime()));
            writer.newLine();
            writer.write("class Res {");
            writer.newLine();
            List<String> packages = new ArrayList<>();
            for (String out : assets) {
                //排除MAC系统自动生成的.DS_Store,
                if (out.contains(".DS_Store")) {
                    continue;
                }
                String assetPath = out.replaceAll(" {2,}- ", "").trim();
                String name = out.substring(out.lastIndexOf("/") + 1).split("\\.")[0];
                writer.write("  static const String " + name + " = \"" + assetPath + "\";");
                writer.newLine();
            }
            writer.write("}");
            writer.newLine();
            if (!packages.isEmpty()) {
                writer.newLine();
                writer.write("class Packages {");
                writer.newLine();
                for (String pkg : packages) {
                    writer.write("  static const String " + pkg + " = \"" + pkg + "\";");
                    writer.newLine();
                }
                writer.write("}");
                writer.newLine();
            }

            writer.flush();
            System.out.println("end start generate res.dart...");
            helper.showSuccessInfo();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (writer != null) {
                try {
                    writer.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}
